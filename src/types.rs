/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

/// Release : The [release](https://docs.github.com/en/rest/reference/repos/#get-a-release) object.
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, Default, Serialize, Deserialize)]
pub struct Release {
    pub assets: Vec<ReleaseAsset>,
    pub assets_url: String,
    pub author: Option<Box<User>>,
    pub body: Option<String>,
    pub created_at: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub discussion_url: Option<String>,
    /// Whether the release is a draft or published
    pub draft: bool,
    pub html_url: String,
    pub id: i32,
    pub name: Option<String>,
    pub node_id: String,
    /// Whether the release is identified as a prerelease or a full release.
    pub prerelease: bool,
    pub published_at: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reactions: Option<Box<Reactions>>,
    pub tag_name: String,
    pub tarball_url: Option<String>,
    /// Specifies the commitish value that determines where the Git tag is created from.
    pub target_commitish: String,
    pub upload_url: String,
    pub url: String,
    pub zipball_url: Option<String>,
}

/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Eq, Default, Serialize, Deserialize)]
pub struct User {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub followers_url: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub following_url: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gists_url: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    pub id: i32,
    pub login: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub organizations_url: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub received_events_url: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub repos_url: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub site_admin: Option<bool>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub starred_url: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subscriptions_url: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    Bot,
    User,
    Organization,
}

#[derive(Clone, Debug, PartialEq, Eq, Default, Serialize, Deserialize)]
pub struct ReleaseAsset {
    pub browser_download_url: String,
    pub content_type: String,
    pub created_at: String,
    pub download_count: i32,
    pub id: i32,
    pub label: Option<String>,
    /// The file name of the asset.
    pub name: String,
    pub node_id: String,
    pub size: i32,
    /// State of the release asset.
    pub state: State,
    pub updated_at: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uploader: Option<Box<User>>,
    pub url: String,
}

/// State of the release asset.
#[derive(
    Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, Default,
)]
pub enum State {
    #[serde(rename = "uploaded")]
    #[default]
    Uploaded,
}

#[derive(Clone, Debug, PartialEq, Eq, Default, Serialize, Deserialize)]
pub struct Reactions {
    #[serde(rename = "+1")]
    pub plus_1: i32,
    #[serde(rename = "-1")]
    pub _1: i32,
    pub confused: i32,
    pub eyes: i32,
    pub heart: i32,
    pub hooray: i32,
    pub laugh: i32,
    pub rocket: i32,
    pub total_count: i32,
    pub url: String,
}
